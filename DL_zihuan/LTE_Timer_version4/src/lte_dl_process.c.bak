/***********************************************/
/*main                                         */
/*功能：LTE PDSCH TRANSMITTER MAIN PROCESSER   */
/***********************************************/
#include "system_init.h"
#include "pl_comm.h"
#include "TSC.h"


/*LTE PDSCH TRANSMITTER MAIN PROCESSER*/
void main(void)
{
    unsigned int ok_flag = 1;
    unsigned int i;
    unsigned int cp_len;
    unsigned char slot_idx;
    unsigned int user_index;

    unsigned int* ssc_data_ptr;
    unsigned char total_symbol,temp_symbol;
    signed short shift_factor[NUM_ANTENNA_PORT_4][6];
    unsigned int fftc_output_data_address[NUM_RX_DESC];
    unsigned int* restrict fftc_input_data_ptr1;
    unsigned int* restrict fftc_input_data_ptr2;
    unsigned int dft_list[6 * NUM_ANTENNA_PORT_4];
    unsigned char * rsgen_output_buffer[6];
    signed int * precoding_data_buffer[NUM_ANTENNA_PORT_2];
    signed int * e_time_data_in_ptr[NUM_ANTENNA_PORT_2];
    signed int * e_time_data_out_ptr[NUM_ANTENNA_PORT_2];
    signed int * output_data[NUM_ANTENNA_PORT_2];
    signed int * precoding_pbch_data_buffer[NUM_ANTENNA_PORT_2];
    signed int * precoding_pcfich_data_buffer[NUM_ANTENNA_PORT_2];
    signed int * precoding_pdcch_data_buffer[NUM_ANTENNA_PORT_2];
    signed int * precoding_phich_data_buffer[NUM_ANTENNA_PORT_2];
    unsigned int uiDspNum,end;
    int cycle_sub,srio_cycle4;
    TDSP_Type dspType;
    signed short pbch_start_index,sfn,sfn_temp;
    unsigned char pdcch_format = 0,port_index = 0,pdcch_index = 0;
    unsigned short DCI_bit_length = 0;
    unsigned int c_init,temp_scramble_bits;
    unsigned char HI = 0;
    unsigned char n_seq = 0;
    unsigned char n_group = 0;
    int phich_index = 0;
    int phich_temp[12];
    

    glbCoreId = CSL_chipReadReg (CSL_CHIP_DNUM);
#ifndef SIMULATOR
    CACHE_setL1PSize(CACHE_L1_32KCACHE);
    CACHE_setL1DSize(CACHE_L1_32KCACHE);
    CACHE_setL2Size(CACHE_256KCACHE);
    CACHE_invAllL1p(CACHE_WAIT);
    CACHE_wbInvAllL1d(CACHE_WAIT);

    //CACHE_invAllL2(CACHE_NOWAIT);

    /*make other cores local memory cacheable and prefetchable*/

        for(i=16; i<24; i++)
          CGEM_regs->MAR[i]=1|(1<<CSL_CGEM_MAR0_PFX_SHIFT);

        /*make DDR cacheable and prefetchable*/
        for(i=128; i<256; i++)
          CGEM_regs->MAR[i]=1|(1<<CSL_CGEM_MAR0_PFX_SHIFT);

        /*make other space non-cacheable and non-prefetchable*/
        for(i=24; i<128; i++)
          CGEM_regs->MAR[i]=0;
#endif


      TSC_init();
    #ifndef SIMULATOR
      dspType= Get_dsp_type();
      if(NYQUIST==dspType||TRUBO_NYQUIST==dspType)
      {
        //DSP core speed
        KeyStone_main_PLL_init (236, 29);   //for 122.88MHz input clock

        //DDR speed = 66.67*20/1= 1333
        KeyStone_DDR_PLL_init (20, 1);

        Nyquist_EVM_DDR_Init(666.667);  //for 1333Mbps

        serdes_cfg.commonSetup.inputRefClock_MHz = 250;//156.25;
      }
      else
      {
        puts("Unknown DSP type!");
        return;
      }
    #endif
    uiDspNum= 0;
    fxx_srio_init(uiDspNum);
    enable_fftc ();
    fftc_system_init(CSL_FFTC_A);
    for (i = 0; i < NUM_RX_DESC; i++)
    {
         fftc_output_data_address[i] = (unsigned int)&gTxBuffer[i];
    }
    /*Setup TX free queue*/
    if(Setup_Tx_FDQ() != 0)
    {
      printf ("[Core %d]: FFTC setup TX FDQ failed \n", glbCoreId);
    }
    /*Setup RX free queue*/
    if(Setup_Rx_FDQ(fftc_output_data_address) != 0)
    {
       printf ("[Core %d]: FFTC setup RX FDQ failed \n", glbCoreId);
    }

    /*CSL_FFTC_A:fftc_cfgRegs = (CSL_FftcRegs*)(0x021F0000)
    CSL_FFTC_B:fftc_cfgRegs = (CSL_FftcRegs*)(0x021F4000)*/
    /*FFTC Global config*/
    if(fftc_global_config((CSL_FftcRegs*)0x021F0000) != 0)
    {
      printf ("[Core %d]: FFTC Global config failed \n", glbCoreId);
    }
    system_init();

    TSC_init();
    para_init(&vxx_config_para_init);
    cell_para_update(&vxx_cell_para,
                     &rsgen_output[0][0][0],
                     psch_data_ptr,
                     ssch_data_subframe0_buffer,
                     ssch_data_subframe5_buffer);/*小区参数配置后不会改变*/
    f_dl_database_updata(&vxx_cell_para);
    for(slot_idx = 0;slot_idx < 20;slot_idx+=2)/*一个无线帧有20个时隙*/
    {
        pdcch_database_updata(&vxx_cell_para,
                          slot_idx >> 1);
        f_dl_phich_mapping(slot_idx >> 1,
                           g_N_group_phich[slot_idx >> 1],
                           &g_phich_data.phich_mapping[slot_idx >> 1][0]);                  
    }

    sfn = -1;
    for(;;)
    {    
        
        
        for(slot_idx = 0;slot_idx < 20;slot_idx+=2)/*一个无线帧有20个时隙*/
        {
          start = TSCL;
          if(slot_idx == 0)
          {
              sfn++;
          }
          for(i = 0;i < NUM_ANTENNA_PORT_2;i++)
          {
                //precoding_data_buffer[i] = vxx_precoding_data[i];
                output_data[i] = vxx_output_data[i];
                precoding_pbch_data_buffer[i] = vxx_pbch_precoding_data[i];
                precoding_pcfich_data_buffer[i] = g_pcfich_data_after_precoding[i];
                precoding_pdcch_data_buffer[i] = g_pdcch_data_after_precoding[i];
                precoding_phich_data_buffer[i] = g_phich_data_after_precoding[i];
          }


            if(UL == vxx_cell_para.subframe_direction[slot_idx >> 1])
            {
              //CycleDelay(TIME_GAP);
              continue;
            }
            if((slot_idx == 2) || (slot_idx == 12))/*特殊子帧*/
            {
                total_symbol = vxx_cell_para.dwpts_symbol;
            }
            else
            {
                total_symbol = 2 * N_SYM_PER_SLOT;
            }
#if 1

            if((slot_idx == 0) && (0 == (sfn & 3)))
            {
                 sfn_temp = sfn >> 2;//0~1023,取高8位 sfn本身范围是0~4095
                 /*dl-Bandwidth(3):5代表100prb
                   phich-Durtion(1):0
                   phich-Resource(2):0
                   systemFrmeNumber(8):
                   spare(10)*/
                 vxx_pbch_data = ((vxx_cell_para.dl_Bandwidth << 21) & 0x00ffffff) | ((vxx_cell_para.phich_Durtion << 20) & 0x00ffffff)
                                     | ((vxx_cell_para.g_phich_Ng << 18) & 0x00ffffff) |((sfn_temp << 10) & 0x00ffffff);
                 vxx_pbch_data = _bitr(vxx_pbch_data) >> 8;
                 bcp_lte_pbch(&vxx_cell_para,
                           slot_idx);

            }
            if(slot_idx == 0)
            {

                ssc_data_ptr = ssch_data_subframe0_buffer;
                pbch_start_index = sfn & 3;

                /*PBCH也要进行层映射和预编码*/
                layermapping(
                             (signed int*)vxx_cell_para.pbch_modulation_data_ptr + pbch_start_index * PBCH_SYMBOL_LEN_SLOT0,/*码字0调制后的符号 Q(16,3)*/
                             (signed int*)vxx_cell_para.pbch_modulation_data_ptr,/*PBCH只有一个码字，所以该参数不会使用*/
                              vxx_pbch_layermapping_data,/*层映射后的符号 Q(16,3)*/
                              vxx_cell_para.pbch_m_symbol,/*码字0调制后的符号个数,在cell_para_update中计算*/
                              &vxx_cell_para.pbch_layer_symbol,/*层映射后的每层符号个数*/
                              vxx_cell_para.num_antenna_port,/*层数*/
                              1,/*码字个数*/
                              vxx_cell_para.pbch_pcfich_pdcch_phich_ueTransMode/*下行传输模式*/
                             );

                precoding(
                        precoding_pbch_data_buffer,/*预编码后的符号 Q(16,3)*/
                          &vxx_cell_para.pbch_m_ap_symbol,/*预编码后的符号个数*/
                          vxx_pbch_layermapping_data,/*层映射后的符号 Q(16,3)*/
                          vxx_pbch_layermapping_data + vxx_cell_para.pbch_layer_symbol,
                          vxx_cell_para.pbch_layer_symbol,/*层映射后的每层符号个数,是2的倍数吗？*/
                          vxx_cell_para.num_antenna_port,/*层数*/
                          vxx_cell_para.num_antenna_port,/*天线端口个数*/
                          vxx_cell_para.pbch_pcfich_pdcch_phich_ueTransMode,/*下行传输模式*/
                          0 /*无delya模式*/
                          );

            }
#endif
            if(slot_idx == 10)
            {
                ssc_data_ptr = ssch_data_subframe5_buffer;
            }

            if(ok_flag == 0)/*如果本子帧没有收到数据，进行下个子帧处理*/
            {
              continue;
            }
            vxx_mac_para.pdcch_num = vxx_user_num;
            for(user_index = 0;user_index < vxx_user_num;user_index++)
            {
            	vxx_mac_para.phich_para[user_index] = vxx_config_para_init[user_index].phich_para;
            	if((slot_idx == 2) || (slot_idx == 12))/*特殊子帧子帧存在PSCH*/
                {
                    vxx_mac_para.pdcch_para[user_index] = vxx_config_para_init[user_index].pdcch_para[1];
                }
                else if(slot_idx == 0)/*PBCH和SSCH存在slot0*/
                {
                    vxx_mac_para.pdcch_para[user_index] = vxx_config_para_init[user_index].pdcch_para[0];
                }
                else
                {
                    vxx_mac_para.pdcch_para[user_index] = vxx_config_para_init[user_index].pdcch_para[2];
                }
            }
            /************************************PCFICH********************************************/
            //编码
            g_pcfich_data_origin = g_const_cfi_code_table[vxx_cell_para.pcfich_index  % 3];
            
            //加扰
            c_init = ((slot_idx>>1) + 1) * ((2 * vxx_cell_para.cellID + 1) << 9) + vxx_cell_para.cellID;
            scrambling_data_gen(x1_sequence_table,
                                c_init,
                                PCFICH_BIT_LEN,/*以byte为单位输入*/
                                &temp_scramble_bits);
            g_pcfich_data_after_scram = g_pcfich_data_origin ^ temp_scramble_bits;
           
            //调制
            f_qpsk_modulation((unsigned char*)&g_pcfich_data_after_scram,
                              g_pcfich_data_after_modulation,
                              PCFICH_BIT_LEN);
            
            //层映射
            layermapping(
                         (signed int*)g_pcfich_data_after_modulation,/*码字0调制后的符号 Q(16,3)*/
                         (signed int*)g_pcfich_data_after_modulation,/*码字1调制后的符号 Q(16,3)*/
                         g_pcfich_data_after_layermapping,/*层映射后的符号 Q(16,3)*/ 
                         PCFICH_BIT_LEN/2,/*码字0调制后的符号个数,在user_para_update中计算*/
                         &vxx_cell_para.pcfich_layer_symbol,/*层映射后的每层符号个数*/
                         vxx_cell_para.num_antenna_port,/*层数*/
                         1,/*码字个数*/
                         vxx_cell_para.pbch_pcfich_pdcch_phich_ueTransMode/*下行传输模式*/
                         );
            //预编码
            precoding(
                  precoding_pcfich_data_buffer,/*预编码后的符号 Q(16,3)*/
                      (unsigned int*)&vxx_cell_para.pcfich_m_ap_symbol,/*预编码后的符号个数*/
                      g_pcfich_data_after_layermapping,/*层映射后的符号 Q(16,3)*/
                      g_pcfich_data_after_layermapping + vxx_cell_para.pcfich_layer_symbol,
                      vxx_cell_para.pcfich_layer_symbol,/*层映射后的每层符号个数,是2的倍数吗？*/
                      vxx_cell_para.num_antenna_port,/*层数*/
                      vxx_cell_para.num_antenna_port,/*天线端口个数*/
                      vxx_cell_para.pbch_pcfich_pdcch_phich_ueTransMode,/*下行传输模式*/
                      0 /*无delya模式*/
                      );
            /************************************PHICH********************************************/
            //编码调制
            if(0 != g_N_group_phich[slot_idx>>1])
            {
                memset(g_phich_data.phich_freq_data,0,g_N_group_phich[slot_idx>>1] * 12 *4);/*将频域空间清0*/
                for(phich_index = 0;phich_index < vxx_mac_para.phich_num;phich_index++)
                {
                     HI = vxx_mac_para.phich_para[phich_index].ACK_NACK;
                     n_seq = vxx_mac_para.phich_para[phich_index].n_seq;
                     n_group = vxx_mac_para.phich_para[phich_index].n_group;
                     f_phich_data_gen(n_seq,
                                  HI,
                                  temp_scramble_bits,
                                  phich_temp);
                     for(i =0;i < 12;i++)/*累加*/
                     {
                         g_phich_data.phich_freq_data[n_group * 12 + i] = g_phich_data.phich_freq_data[n_group * 12 + i] + phich_temp[i];
                     }
                }
                //层映射
                layermapping(
                         (signed int*)g_phich_data.phich_freq_data,/*码字0调制后的符号 Q(16,3)*/
                         (signed int*)g_phich_data.phich_freq_data,/*码字1调制后的符号 Q(16,3)*/
                         g_pdcch_data_after_layermapping,/*层映射后的符号 Q(16,3) 复用pdcch buffer*/ 
                         12 * g_N_group_phich[slot_idx>>1],
                         &vxx_cell_para.phich_layer_symbol,/*层映射后的每层符号个数*/
                         vxx_cell_para.num_antenna_port,/*层数*/
                         1,/*码字个数*/
                         vxx_cell_para.pbch_pcfich_pdcch_phich_ueTransMode/*下行传输模式*/
                         );
                //预编码
                precoding(
                      precoding_phich_data_buffer,/*预编码后的符号 Q(16,3)*/
                      (unsigned int*)&vxx_cell_para.phich_m_ap_symbol,/*预编码后的符号个数*/
                      g_pdcch_data_after_layermapping,/*层映射后的符号 Q(16,3) 复用pdcch buffer*/
                      g_pdcch_data_after_layermapping + vxx_cell_para.phich_layer_symbol,
                      vxx_cell_para.phich_layer_symbol,/*层映射后的每层符号个数,是2的倍数吗？*/
                      vxx_cell_para.num_antenna_port,/*层数*/
                      vxx_cell_para.num_antenna_port,/*天线端口个数*/
                      vxx_cell_para.pbch_pcfich_pdcch_phich_ueTransMode,/*下行传输模式*/
                      0 /*无delya模式*/
                      );
            }
            /************************************PDCCH******************************************/
            //扰码生成
           
            c_init = ((slot_idx >> 1) << 9) + vxx_cell_para.cellID;
           
            scrambling_data_gen(x1_sequence_table,
                                c_init,
                                8 * g_dl_resource_mapping.symbol_pdcch_reg_num[slot_idx >> 1][0],
                                g_pdcch_pseudo);
            //编码，速率匹配，调制，加扰
            memset(pdcch_cce_unuse_flag,0x01,100);
            memset(g_pdcch_bit_data_after_scram,0x0,3200);
            bcp_lte_pdcch(&vxx_cell_para,
                         slot_idx,
                         &vxx_mac_para,
                         g_pdcch_pseudo);
            
            //层映射
            layermapping(
                         (signed int*)g_pdcch_bit_data_after_scram,/*码字0调制后的符号 Q(16,3)*/
                         (signed int*)g_pdcch_bit_data_after_scram,/*码字1调制后的符号 Q(16,3)*/
                         g_pdcch_data_after_layermapping,/*层映射后的符号 Q(16,3)*/ 
                         4 * g_dl_resource_mapping.symbol_pdcch_reg_num[slot_idx >> 1][0],/*码字0调制后的符号个数,在user_para_update中计算*/
                         &vxx_mac_para.pdcch_layer_symbol,/*层映射后的每层符号个数*/
                         vxx_cell_para.num_antenna_port,/*层数*/
                         1,/*码字个数*/
                         vxx_cell_para.pbch_pcfich_pdcch_phich_ueTransMode/*下行传输模式*/
                         );
            //预编码
            precoding(
                      precoding_pdcch_data_buffer,/*预编码后的符号 Q(16,3)*/
                      (unsigned int*)&vxx_mac_para.pdcch_m_ap_symbol,/*预编码后的符号个数*/
                      g_pdcch_data_after_layermapping,/*层映射后的符号 Q(16,3)*/
                      g_pdcch_data_after_layermapping + vxx_mac_para.pdcch_layer_symbol,
                      vxx_mac_para.pdcch_layer_symbol,/*层映射后的每层符号个数,是2的倍数吗？*/
                      vxx_cell_para.num_antenna_port,/*层数*/
                      vxx_cell_para.num_antenna_port,/*天线端口个数*/
                      vxx_cell_para.pbch_pcfich_pdcch_phich_ueTransMode,/*下行传输模式*/
                      0 /*无delya模式*/
                      );
            f_block_interleaver((long long*)g_pdcch_data_after_precoding[0],
                                (long long*)g_pdcch_data_after_precoding[1],
                                (long long*)g_pdcch_data_after_interleaver[0],
                                (long long*)g_pdcch_data_after_interleaver[1],
                                vxx_cell_para.pdcch_total_reg_num[slot_idx >> 1],
                                    vxx_cell_para.cellID);//为交织留余地
            
            memset(&vxx_output_data,0,NUM_ANTENNA_PORT_2 * 4 * 2 * N_SYM_PER_SLOT * N_DL_RB * N_SC_PER_RB);
            for(user_index = 0;user_index < vxx_user_num;user_index++)
            {
                /************************************PDSCH*********************************************/
#if 1  
              for(i = 0;i < NUM_ANTENNA_PORT_2;i++)
              {
                   precoding_data_buffer[i] = vxx_precoding_data[i];
              }
              (void)user_para_update(&vxx_user_para[user_index],slot_idx,
                                       &vxx_cell_para,
                                       &vxx_config_para_init[user_index]);/*用户参数以每个子帧为单位重新读取,仅支持一个用户*/
                ok_flag = 0;
                ok_flag = bcp_lte_pdsch(&vxx_user_para[user_index],
                                        &vxx_cell_para,
                                        slot_idx);
#endif
                CACHE_invL2((signed int*)vxx_user_para[user_index].modulation_data_ptr[0], 4*vxx_user_para[user_index].m_sybol, CACHE_WAIT);
                CACHE_invL2((signed int*)vxx_user_para[user_index].modulation_data_ptr[1], 4*vxx_user_para[user_index].m_sybol, CACHE_WAIT);
                

                if(1 == ok_flag)
                {
                  if(((SPATIAL_MULTIPLEXING == vxx_user_para[user_index].ueTransMode) && (NUM_CODEWORD_1 == vxx_user_para[user_index].num_code_word))
                  || ((TRANSMIT_DIVERSITY == vxx_user_para[user_index].ueTransMode) && (NUM_CODEWORD_1 == vxx_user_para[user_index].num_code_word)))
                  {
                      layermapping(
                                 (signed int*)vxx_user_para[user_index].modulation_data_ptr[0],/*码字0调制后的符号 Q(16,3)*/
                                 (signed int*)vxx_user_para[user_index].modulation_data_ptr[1],/*码字1调制后的符号 Q(16,3)*/
                                 vxx_layermapping_fft_data.layermapping_data,/*层映射后的符号 Q(16,3)*/ 
                                 vxx_user_para[user_index].m_sybol,/*码字0调制后的符号个数,在user_para_update中计算*/
                                 &vxx_user_para[user_index].laryer_symbol,/*层映射后的每层符号个数*/
                                 vxx_user_para[user_index].numLayers,/*层数*/
                                 vxx_user_para[user_index].num_code_word,/*码字个数*/
                                 vxx_user_para[user_index].ueTransMode/*下行传输模式*/
                                 );
                      precoding(
                                precoding_data_buffer,/*预编码后的符号 Q(16,3)*/
                                &vxx_user_para[user_index].m_ap_symbol,/*预编码后的符号个数*/
                                vxx_layermapping_fft_data.layermapping_data,/*层映射后的符号 Q(16,3)*/
                                vxx_layermapping_fft_data.layermapping_data + vxx_user_para[user_index].laryer_symbol,
                                vxx_user_para[user_index].laryer_symbol,/*层映射后的每层符号个数,是2的倍数吗？*/
                                vxx_user_para[user_index].numLayers,/*层数*/
                                vxx_cell_para.num_antenna_port,/*天线端口个数*/
                                vxx_user_para[user_index].ueTransMode,/*下行传输模式*/
                                vxx_user_para[user_index].delay_mod /*延时模式*/
                                );
                  }
                  if((SPATIAL_MULTIPLEXING == vxx_user_para[user_index].ueTransMode) && (NUM_CODEWORD_2 == vxx_user_para[user_index].num_code_word))
                  {
                     precoding(
                               precoding_data_buffer,/*预编码后的符号 Q(16,3)*/
                               &vxx_user_para[user_index].m_ap_symbol,/*预编码后的符号个数*/
                               (signed int*)vxx_user_para[user_index].modulation_data_ptr[0],/*码字0调制后的符号 Q(16,3)*/
                               (signed int*)vxx_user_para[user_index].modulation_data_ptr[1],/*码字1调制后的符号 Q(16,3)*/
                               vxx_user_para[user_index].m_sybol,/*层映射后的每层符号个数,是2的倍数吗？*/
                               vxx_user_para[user_index].numLayers,/*层数*/
                               vxx_cell_para.num_antenna_port,/*天线端口个数*/
                               vxx_user_para[user_index].ueTransMode,/*下行传输模式*/
                               vxx_user_para[user_index].delay_mod /*延时模式*/
                               );
                  }

                    rsgen_output_buffer[0] = rsgen_output[slot_idx][0];
                    rsgen_output_buffer[1] = rsgen_output[slot_idx][1];
                    rsgen_output_buffer[2] = rsgen_output[slot_idx][2];
                    rsgen_output_buffer[3] = rsgen_output[slot_idx + 1][0];
                    rsgen_output_buffer[4] = rsgen_output[slot_idx + 1][1];
                    rsgen_output_buffer[5] = rsgen_output[slot_idx + 1][2];


                    prbmapping(
                               slot_idx,/*一个无线帧中的时隙索引，输入为偶数0,2,4~18*/
                               &vxx_user_para[user_index],
                               &vxx_cell_para,
                               rsgen_output_buffer,/*3symbol*220char,存储的是实虚部共同索引*/
                               precoding_data_buffer,/*SCH_data_buffer[ant_port][调制后的所有符号]*/
                               output_data,/*一个子帧output_data[ant_port][14*100*12]*/
                               precoding_pbch_data_buffer,
                               psch_data_ptr,
                               ssc_data_ptr,
                               total_symbol,
                               user_index
                               );
                }
           }


           used_len = 0;

           for (i = 0; i < 6 * vxx_cell_para.num_antenna_port; i++)/*按照最大的来配置*/
           {
                dft_list[i] = IDFT_SIZE;
            }
           if((slot_idx == 2) || (slot_idx == 12))/*特殊子帧*/
           {
               /******************************处理符号0*****************************************/
               cp_len = 160;

               ok_flag = fft_config(dft_list,/*输入的DFT/IDFTsize，仅支持DFT_sz_list里面的各种size*/
                                    1 ,/*输入的DFT/IDFTsize个数,目前仅支持每次1种DFTSIZE配置*/
                                    1204,/*输入数据长度必须是4的倍数*/
                                    IDFT_MODE,/*DFT/IDFT*/
                                    fftc_output_data_address,/*输出数据地址,使用时注意输出数据要偏移4个int才是真正的结果*/
                                    CSL_FFTC_A,
                                    ZERO_PAD_VALUE,/*zero-pad value*/
                                    VARIABLE_SHIFT_INPUT,/*VARIABLE_SHIFT_INPUT = 1448/2*/
                                    cp_len,
                                    0,
                                    1);
               

               /******************************处理剩下的符号*****************************************/
               if(N_SYM_PER_SLOT >= total_symbol)
               {
                   temp_symbol = total_symbol;
               }    
               else     
               {
                   temp_symbol = N_SYM_PER_SLOT;
               }
               
               
               cp_len = 144;

               ok_flag = fft_config(dft_list,/*输入的DFT/IDFTsize，仅支持DFT_sz_list里面的各种size*/
                                    (temp_symbol - 1),/*输入的DFT/IDFTsize个数,目前仅支持每次1种DFTSIZE配置*/
                                    1204,/*输入数据长度必须是4的倍数*/
                                    IDFT_MODE,/*DFT/IDFT*/
                                    fftc_output_data_address,/*输出数据地址,使用时注意输出数据要偏移4个int才是真正的结果*/
                                    CSL_FFTC_A,
                                    ZERO_PAD_VALUE,/*zero-pad value*/
                                    VARIABLE_SHIFT_INPUT,/*VARIABLE_SHIFT_INPUT = 1448/2*/
                                    cp_len,
                                    1,
                                    temp_symbol);
               

               /******************************处理符号7*****************************************/
               if(N_SYM_PER_SLOT < total_symbol)
               {
               
               
                   cp_len = 160;

                   ok_flag = fft_config(dft_list,/*输入的DFT/IDFTsize，仅支持DFT_sz_list里面的各种size*/
                                        1,/*输入的DFT/IDFTsize个数,目前仅支持每次1种DFTSIZE配置*/
                                        1204,/*输入数据长度必须是4的倍数*/
                                        IDFT_MODE,/*DFT/IDFT*/
                                        fftc_output_data_address,/*输出数据地址,使用时注意输出数据要偏移4个int才是真正的结果*/
                                        CSL_FFTC_A,
                                        ZERO_PAD_VALUE,/*zero-pad value*/
                                        VARIABLE_SHIFT_INPUT,/*VARIABLE_SHIFT_INPUT = 1448/2*/
                                        cp_len,
                                        7,
                                        8);

                   /******************************处理符号8~total_symbol*****************************************/
                   if((N_SYM_PER_SLOT + 1) < total_symbol)
                   {
                       cp_len = 144;
               

                       ok_flag = fft_config(dft_list,/*输入的DFT/IDFTsize，仅支持DFT_sz_list里面的各种size*/
                                            (total_symbol - 8),/*输入的DFT/IDFTsize个数,目前仅支持每次1种DFTSIZE配置*/
                                            1204,/*输入数据长度必须是4的倍数*/
                                            IDFT_MODE,/*DFT/IDFT*/
                                            fftc_output_data_address,/*输出数据地址,使用时注意输出数据要偏移4个int才是真正的结果*/
                                            CSL_FFTC_A,
                                            ZERO_PAD_VALUE,/*zero-pad value*/
                                            VARIABLE_SHIFT_INPUT,/*VARIABLE_SHIFT_INPUT = 1448/2*/
                                            cp_len,
                                            8,
                                            total_symbol);
                       

                   }
                   
               }

           }
           else/*非特殊子帧*/
           {
               /******************************处理符号0*****************************************/
               cp_len = 160;
               

               ok_flag = fft_config(dft_list,/*输入的DFT/IDFTsize，仅支持DFT_sz_list里面的各种size*/
                                    1,/*输入的DFT/IDFTsize个数,目前仅支持每次1种DFTSIZE配置*/
                                    1204,/*输入数据长度必须是4的倍数*/
                                    IDFT_MODE,/*DFT/IDFT*/
                                    fftc_output_data_address,/*输出数据地址,使用时注意输出数据要偏移4个int才是真正的结果*/
                                    CSL_FFTC_A,
                                    ZERO_PAD_VALUE,/*zero-pad value*/
                                    VARIABLE_SHIFT_INPUT,/*VARIABLE_SHIFT_INPUT = 1448/2*/
                                    cp_len,
                                    0,
                                    1);



               /******************************处理符号1~6*****************************************/

               cp_len = 144;

               ok_flag = fft_config(dft_list,/*输入的DFT/IDFTsize，仅支持DFT_sz_list里面的各种size*/
                                    6,/*输入的DFT/IDFTsize个数,目前仅支持每次1种DFTSIZE配置*/
                                    1204,/*输入数据长度必须是4的倍数*/
                                    IDFT_MODE,/*DFT/IDFT*/
                                    fftc_output_data_address,/*输出数据地址,使用时注意输出数据要偏移4个int才是真正的结果*/
                                    CSL_FFTC_A,
                                    ZERO_PAD_VALUE,/*zero-pad value*/
                                    VARIABLE_SHIFT_INPUT,/*VARIABLE_SHIFT_INPUT = 1448/2*/
                                    cp_len,
                                    1,
                                    7);



               /******************************处理符号7*****************************************/
               
               cp_len = 160;

               ok_flag = fft_config(dft_list,/*输入的DFT/IDFTsize，仅支持DFT_sz_list里面的各种size*/
                                    1,/*输入的DFT/IDFTsize个数,目前仅支持每次1种DFTSIZE配置*/
                                    1204,/*输入数据长度必须是4的倍数*/
                                    IDFT_MODE,/*DFT/IDFT*/
                                    fftc_output_data_address,/*输出数据地址,使用时注意输出数据要偏移4个int才是真正的结果*/
                                    CSL_FFTC_A,
                                    ZERO_PAD_VALUE,/*zero-pad value*/
                                    VARIABLE_SHIFT_INPUT,/*VARIABLE_SHIFT_INPUT = 1448/2*/
                                    cp_len,
                                    7,
                                    8);

               /******************************处理符号8~13*****************************************/
               cp_len = 144;

               ok_flag = fft_config(dft_list,/*输入的DFT/IDFTsize，仅支持DFT_sz_list里面的各种size*/
                                    6,/*输入的DFT/IDFTsize个数,目前仅支持每次1种DFTSIZE配置*/
                                    1204,/*输入数据长度必须是4的倍数*/
                                    IDFT_MODE,/*DFT/IDFT*/
                                    fftc_output_data_address,/*输出数据地址,使用时注意输出数据要偏移4个int才是真正的结果*/
                                    CSL_FFTC_A,
                                    ZERO_PAD_VALUE,/*zero-pad value*/
                                    VARIABLE_SHIFT_INPUT,/*VARIABLE_SHIFT_INPUT = 1448/2*/
                                    cp_len,
                                    8,
                                    14);



           }              
           CACHE_wbL2(vxx_layermapping_fft_data.fft_output_data,sizeof(vxx_layermapping_fft_data.fft_output_data),CACHE_WAIT);
           cycle_sub = TSC_delay_cycle(start);
           //srio_send(slot_idx,uiDspNum,3);
           //srio_cycle4 = TIME_GAP - cycle_sub;
           //if(srio_cycle4 > 0)
           //{
             //CycleDelay(srio_cycle4);
           //}

            

        }
        
        
    }    


}

