<?xml version="1.0" encoding="UTF-8"?>

<resource.explorer version="1.0" name="SYS/BIOS" dir="" href="http://processors.wiki.ti.com">



	<content name="Release Notes" href="D:/ti/bios_6_34_02_18/Bios_6_34_02_18_release_notes.html">
		<type>weblink</type>
	</content>
	<content name="Getting Started Guide" href="D:/ti/bios_6_34_02_18/docs/Bios_Getting_Started_Guide.pdf">
		<type>weblink</type>
	</content>
	<content name="Users Guide" href="D:/ti/bios_6_34_02_18/docs/Bios_User_Guide.pdf">
		<type>weblink</type>
	</content>
	<content name="Legacy Applications note" href="D:/ti/bios_6_34_02_18/docs/Bios_Legacy_App_Note.pdf">
		<type>weblink</type>
	</content>
	<filter id="filter_family_TMS470">
		<devices><device>ARM</device></devices>
	</filter>
	<contents name="ARM" desc="ARM" icon="plugin://icons/obj16/devices.png">
		<filter.ref ref.id="filter_family_TMS470"/>
		<contents name="AM17x - ARM9" desc="AM17x - ARM9" icon="plugin://icons/obj16/devices.png">
			<contents name="AM1705" desc="AM1705" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1705"/>
							<attribute key="device.variant" value="ARM9.AM1705"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM1707" desc="AM1707" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMAM1707" desc="EVMAM1707" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM1707"/>
							<attribute key="device.variant" value="ARM9.AM1707.EVMAM1707"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="AM18x - ARM9" desc="AM18x - ARM9" icon="plugin://icons/obj16/devices.png">
			<contents name="AM1802" desc="AM1802" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1802"/>
							<attribute key="device.variant" value="ARM9.AM1802"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM1806" desc="AM1806" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1806"/>
							<attribute key="device.variant" value="ARM9.AM1806"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM1808" desc="AM1808" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM1810" desc="AM1810" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM1810"/>
							<attribute key="device.variant" value="ARM9.AM1810"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMAM1808" desc="EVMAM1808" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM1808"/>
							<attribute key="device.variant" value="ARM9.AM1808.EVMAM1808"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="AM33x - Cortex A8" desc="AM33x - Cortex A8" icon="plugin://icons/obj16/devices.png">
			<contents name="AM3352" desc="AM3352" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3352_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3352"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3352" desc="AM3352" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3352_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3352"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3354" desc="AM3354" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3354_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3354"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3354" desc="AM3354" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3354_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3354"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3356" desc="AM3356" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3356_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3356"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3356" desc="AM3356" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3356_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3356"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3357" desc="AM3357" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3357_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3357"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3357" desc="AM3357" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3357_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3357"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3358" desc="AM3358" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3358" desc="AM3358" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3359" desc="AM3359" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3359_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3359" desc="AM3359" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3359_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="BeagleBone" desc="BeagleBone" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBone_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="BeagleBone" desc="BeagleBone" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBone_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3359.BeagleBone"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMAM3358" desc="EVMAM3358" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMAM3358" desc="EVMAM3358" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.EVMAM3358"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="SK_AM3358" desc="SK_AM3358" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_SK_AM3358_CortexA"/>
							<attribute key="device.variant" value="Cortex A.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="SK_AM3358" desc="SK_AM3358" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_SK_AM3358_CortexM"/>
							<attribute key="device.variant" value="Cortex M.AM3358.SK_AM3358"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="AM35x - Cortex A8" desc="AM35x - Cortex A8" icon="plugin://icons/obj16/devices.png">
			<contents name="AM3505" desc="AM3505" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3505"/>
							<attribute key="device.variant" value="Cortex A.AM3505"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3517" desc="AM3517" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMAM3517" desc="EVMAM3517" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM3517"/>
							<attribute key="device.variant" value="Cortex A.AM3517.EVMAM3517"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="AM37x - Cortex A8" desc="AM37x - Cortex A8" icon="plugin://icons/obj16/devices.png">
			<contents name="AM3703" desc="AM3703" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3703"/>
							<attribute key="device.variant" value="Cortex A.AM3703"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3715" desc="AM3715" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMAM3715" desc="EVMAM3715" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMAM3715"/>
							<attribute key="device.variant" value="Cortex A.AM3715.EVMAM3715"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="AM38x - Cortex A8" desc="AM38x - Cortex A8" icon="plugin://icons/obj16/devices.png">
			<contents name="AM3871" desc="AM3871" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3871"/>
							<attribute key="device.variant" value="Cortex A.AM3871"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3872" desc="AM3872" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3872"/>
							<attribute key="device.variant" value="Cortex A.AM3872"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3874" desc="AM3874" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3874"/>
							<attribute key="device.variant" value="Cortex A.AM3874"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3892" desc="AM3892" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3892"/>
							<attribute key="device.variant" value="Cortex A.AM3892"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="AM3894" desc="AM3894" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_AM3894"/>
							<attribute key="device.variant" value="Cortex A.AM3894"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="ARM9" desc="ARM9" icon="plugin://icons/obj16/devices.png">
			<contents name="DA830/DA828" desc="DA830/DA828" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DA830DA828_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DSKDA830" desc="DSKDA830" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSKDA830_ARM9"/>
							<attribute key="device.variant" value="ARM9.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP4430 (no STM, ETB only)" desc="OMAP4430 (no STM, ETB only)" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_noSTM_ETBOnly_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C6-Integra C6A81xx" desc="C6-Integra C6A81xx" icon="plugin://icons/obj16/devices.png">
			<contents name="C6A8167" desc="C6A8167" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="C6A8168" desc="C6A8168" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C66xx Multicore DSP" desc="C66xx Multicore DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="TCI6614" desc="TCI6614" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TCI6614_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TCI6614"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="Cortex A" desc="Cortex A" icon="plugin://icons/obj16/devices.png">
			<contents name="OMAP3503" desc="OMAP3503" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3503"/>
							<attribute key="device.variant" value="Cortex A.OMAP3503"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3515" desc="OMAP3515" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3515"/>
							<attribute key="device.variant" value="Cortex A.OMAP3515"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="Cortex M" desc="Cortex M" icon="plugin://icons/obj16/devices.png">
			<contents name="OMAP4430 (no STM, ETB only)" desc="OMAP4430 (no STM, ETB only)" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_noSTM_ETBOnly_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM37xx" desc="DaVinci DM37xx" icon="plugin://icons/obj16/devices.png">
			<contents name="BeagleBoard_xM" desc="BeagleBoard_xM" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBoard_xM_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM3725" desc="DM3725" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM3725_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3725"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM3730" desc="DM3730" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM3730" desc="EVMDM3730" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM3730_CortexA"/>
							<attribute key="device.variant" value="Cortex A.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM3xx ARM9-only device" desc="DaVinci DM3xx ARM9-only device" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMDM355" desc="EVMDM355" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355.EVMDM355"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM365" desc="EVMDM365" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365.EVMDM365"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM355" desc="TMS320DM355" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM355"/>
							<attribute key="device.variant" value="ARM9.TMS320DM355"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM365" desc="TMS320DM365" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM365"/>
							<attribute key="device.variant" value="ARM9.TMS320DM365"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM644x" desc="DaVinci DM644x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMDM6446" desc="EVMDM6446" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6441" desc="TMS320DM6441" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6441_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6443" desc="TMS320DM6443" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6443_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6446" desc="TMS320DM6446" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6446_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM646x" desc="DaVinci DM646x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMDM6467" desc="EVMDM6467" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM6467T" desc="EVMDM6467T" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6467T_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6467" desc="TMS320DM6467" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6467_ARM9"/>
							<attribute key="device.variant" value="ARM9.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM81xx" desc="DaVinci DM81xx" icon="plugin://icons/obj16/devices.png">
			<contents name="DM8146" desc="DM8146" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8146_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8147" desc="DM8147" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8147_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8148" desc="DM8148" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8165" desc="DM8165" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8165_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8166" desc="DM8166" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8166_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8167" desc="DM8167" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8167_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8168" desc="DM8168" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM8148" desc="EVMDM8148" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM8148_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM8168" desc="EVMDM8168" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM8168_CortexA"/>
							<attribute key="device.variant" value="Cortex A.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="OMAP-L1x" desc="OMAP-L1x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMOMAPL137" desc="EVMOMAPL137" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMOMAPL138" desc="EVMOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EXPKITOMAPL138" desc="EXPKITOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EXPKITOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="LCDKOMAPL138" desc="LCDKOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKOMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL132" desc="OMAPL132" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL132_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL132"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL137" desc="OMAPL137" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL137_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL137"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL138" desc="OMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL138_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="OMAP3" desc="OMAP3" icon="plugin://icons/obj16/devices.png">
			<contents name="BeagleBoard" desc="BeagleBoard" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBoard_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMOMAP3530" desc="EVMOMAP3530" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3430" desc="OMAP3430" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3430" desc="OMAP3430" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3430_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3525" desc="OMAP3525" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3525_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3525"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3530" desc="OMAP3530" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3530_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3530"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3630" desc="OMAP3630" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3630_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP3630"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3630" desc="OMAP3630" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3630_CortexA"/>
							<attribute key="device.variant" value="Cortex A.OMAP3630"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="OMAP4" desc="OMAP4" icon="plugin://icons/obj16/devices.png">
			<contents name="Blaze_4430" desc="Blaze_4430" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="Blaze_4430" desc="Blaze_4430" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="Blaze_4460" desc="Blaze_4460" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="Blaze_4460" desc="Blaze_4460" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP4430" desc="OMAP4430" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP4430" desc="OMAP4430" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP4460" desc="OMAP4460" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4460_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP4460" desc="OMAP4460" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4460_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="PandaBoard" desc="PandaBoard" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="PandaBoard" desc="PandaBoard" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="PandaBoard_ES" desc="PandaBoard_ES" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_ES_ARM9"/>
							<attribute key="device.variant" value="ARM9.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="PandaBoard_ES" desc="PandaBoard_ES" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_ES_CortexM"/>
							<attribute key="device.variant" value="Cortex M.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
	</contents>
	<filter id="filter_family_C6000">
		<devices><device>C6000</device></devices>
	</filter>
	<contents name="C6000" desc="C6000" icon="plugin://icons/obj16/devices.png">
		<filter.ref ref.id="filter_family_C6000"/>
		<contents name="Generic devices" desc="Generic devices" icon="plugin://icons/obj16/devices.png">
			<contents name="Generic C64x+ Device" desc="Generic C64x+ Device" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC64xpDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC64xPlusDevice"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="Generic C66xx Device" desc="Generic C66xx Device" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC66xxDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC66xxDevice"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="Generic C674x Device" desc="Generic C674x Device" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_GenericC674xDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.C6000.GenericC674xDevice"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C6-Integra C6A81xx" desc="C6-Integra C6A81xx" icon="plugin://icons/obj16/devices.png">
			<contents name="C6A8167" desc="C6A8167" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8167"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="C6A8168" desc="C6A8168" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_C6A8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6A8168"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C645x High Performance DSP" desc="C645x High Performance DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="DSK6455" desc="DSK6455" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSK6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.DSK6455"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVM6455 (TMS320C6455)" desc="EVM6455 (TMS320C6455)" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVM6455_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455.EVM6455"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMC6457 (TMS320C6457)" desc="EVMC6457 (TMS320C6457)" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6457_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.EVMC6457"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMDSEVM6457L" desc="TMDSEVM6457L" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMDSEVM6457L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457.TMDSEVM6457L"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6452" desc="TMS320C6452" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6452"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6452"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6454" desc="TMS320C6454" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6454"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6454"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6455" desc="TMS320C6455" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6455"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6455"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6457" desc="TMS320C6457" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6457"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6457"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C64xx Multicore DSP" desc="C64xx Multicore DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMC6472" desc="EVMC6472" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472.EVMC6472"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMDSEVM6474L" desc="TMDSEVM6474L" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMDSEVM6474L"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474.TMDSEVM6474L"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6472" desc="TMS320C6472" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6472"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6472"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6474" desc="TMS320C6474" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6474"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6474"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6486" desc="TMS320TCI6486" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6486"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6486"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6487" desc="TMS320TCI6487" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6487"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6487"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6488" desc="TMS320TCI6488" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6488"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C66xx Multicore DSP" desc="C66xx Multicore DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="TCI6614" desc="TCI6614" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TCI6614_TMS320C66XX"/>
							<attribute key="device.variant" value="TMS320C66XX.TCI6614"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6657" desc="TMS320C6657" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6657"/>
							<attribute key="device.variant" value="TMS320C66XX.TMS320C6657"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="C674x Floating-point DSP" desc="C674x Floating-point DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMC6747" desc="EVMC6747" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747.EVMC6747"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMC6748" desc="EVMC6748" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.EVMC6748"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="LCDKC6748" desc="LCDKC6748" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKC6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748.LCDKC6748"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6742" desc="TMS320C6742" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6742"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6742"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6743" desc="TMS320C6743" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6743"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6743"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6745" desc="TMS320C6745" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6745"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6745"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6746" desc="TMS320C6746" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6746"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6746"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6747" desc="TMS320C6747" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6747"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6747"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6748" desc="TMS320C6748" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6748"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320C6748"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM37xx" desc="DaVinci DM37xx" icon="plugin://icons/obj16/devices.png">
			<contents name="BeagleBoard_xM" desc="BeagleBoard_xM" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBoard_xM_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.BeagleBoard_xM"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM3725" desc="DM3725" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM3725_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3725"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM3730" desc="DM3730" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM3730" desc="EVMDM3730" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM3730_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.DM3730.EVMDM3730"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM643x" desc="DaVinci DM643x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMDM6437" desc="EVMDM6437" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437.EVMDM6437"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6431" desc="TMS320DM6431" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6431"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6431"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6433" desc="TMS320DM6433" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6433"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6433"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6435" desc="TMS320DM6435" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6435"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6435"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6437" desc="TMS320DM6437" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6437"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6437"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM644x" desc="DaVinci DM644x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMDM6446" desc="EVMDM6446" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446.EVMDM6446"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6441" desc="TMS320DM6441" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6441_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6441"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6443" desc="TMS320DM6443" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6443_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6443"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6446" desc="TMS320DM6446" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6446_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6446"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM646x" desc="DaVinci DM646x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMDM6467" desc="EVMDM6467" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM6467T" desc="EVMDM6467T" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM6467T_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467.EVMDM6467T"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM6467" desc="TMS320DM6467" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM6467_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM6467"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM64x" desc="DaVinci DM64x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMDM642" desc="EVMDM642" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642.EVMDM642"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM648" desc="EVMDM648" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648.EVMDM648"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM640" desc="TMS320DM640" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM640"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM640"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM641" desc="TMS320DM641" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM641"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM641"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM642" desc="TMS320DM642" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM642"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM642"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM643" desc="TMS320DM643" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM643"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM643"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM647" desc="TMS320DM647" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM647"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM647"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320DM648" desc="TMS320DM648" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320DM648"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320DM648"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="DaVinci DM81xx" desc="DaVinci DM81xx" icon="plugin://icons/obj16/devices.png">
			<contents name="DM8146" desc="DM8146" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8146_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8146"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8147" desc="DM8147" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8147_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8147"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8148" desc="DM8148" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8165" desc="DM8165" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8165_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8165"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8166" desc="DM8166" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8166_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8166"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8167" desc="DM8167" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8167_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8167"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DM8168" desc="DM8168" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM8148" desc="EVMDM8148" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM8148_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8148.EVMDM8148"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMDM8168" desc="EVMDM8168" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMDM8168_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.TMS320DM8168.EVMDM8168"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="OMAP-L1x" desc="OMAP-L1x" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMOMAPL137" desc="EVMOMAPL137" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137.EVMOMAPL137"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMOMAPL138" desc="EVMOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EVMOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EXPKITOMAPL138" desc="EXPKITOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EXPKITOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.EXPKITOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="LCDKOMAPL138" desc="LCDKOMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_LCDKOMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138.LCDKOMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL132" desc="OMAPL132" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL132_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL132"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL137" desc="OMAPL137" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL137_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL137"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAPL138" desc="OMAPL138" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAPL138_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.OMAPL138"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="OMAP3" desc="OMAP3" icon="plugin://icons/obj16/devices.png">
			<contents name="BeagleBoard" desc="BeagleBoard" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_BeagleBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.BeagleBoard"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMOMAP3530" desc="EVMOMAP3530" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMOMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530.EVMOMAP3530"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3430" desc="OMAP3430" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3525" desc="OMAP3525" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3525_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3525"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3530" desc="OMAP3530" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3530_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3530"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP3630" desc="OMAP3630" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP3630_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP3630"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="OMAP4" desc="OMAP4" icon="plugin://icons/obj16/devices.png">
			<contents name="Blaze_4430" desc="Blaze_4430" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.Blaze_4430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="Blaze_4460" desc="Blaze_4460" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_Blaze_4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.Blaze_4460"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP4430" desc="OMAP4430" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP4460" desc="OMAP4460" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4460_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="PandaBoard" desc="PandaBoard" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430.PandaBoard"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="PandaBoard_ES" desc="PandaBoard_ES" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_PandaBoard_ES_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4460.PandaBoard_ES"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="TCI High Performance DSP" desc="TCI High Performance DSP" icon="plugin://icons/obj16/devices.png">
			<contents name="DSKTCI6482" desc="DSKTCI6482" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSKTCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.DSKTCI6482"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMTCI6482 (TMS320TCI6482)" desc="EVMTCI6482 (TMS320TCI6482)" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMTCI6482_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482.EVMTCI6482"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6482" desc="TMS320TCI6482" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6482"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6482"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320TCI6484" desc="TMS320TCI6484" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320TCI6484"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320TCI6484"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="TMS320C64XX" desc="TMS320C64XX" icon="plugin://icons/obj16/devices.png">
			<contents name="EVMC6424" desc="EVMC6424" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424.EVMC6424"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMC6474" desc="EVMC6474" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMC6474"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMC6474"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="EVMTCI6488" desc="EVMTCI6488" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_EVMTCI6488"/>
							<attribute key="device.variant" value="TMS320C64XX.EVMTCI6488"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="OMAP4430 (no STM, ETB only)" desc="OMAP4430 (no STM, ETB only)" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_OMAP4430_noSTM_ETBOnly_TMS320C64XX"/>
							<attribute key="device.variant" value="TMS320C64XX.OMAP4430"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6421" desc="TMS320C6421" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6421"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6421"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="TMS320C6424" desc="TMS320C6424" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_TMS320C6424"/>
							<attribute key="device.variant" value="TMS320C64XX.TMS320C6424"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
		<contents name="TMS320C67XX" desc="TMS320C67XX" icon="plugin://icons/obj16/devices.png">
			<contents name="DA804/DA803/DA802" desc="DA804/DA803/DA802" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DA804DA803DA802"/>
							<attribute key="device.variant" value="TMS320C67XX.DA804/DA803/DA802"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DA810/DA80x" desc="DA810/DA80x" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DA810DA80x"/>
							<attribute key="device.variant" value="TMS320C67XX.DA810/DA80x"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DA830/DA828" desc="DA830/DA828" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DA830DA828_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
			<contents name="DSKDA830" desc="DSKDA830" icon="plugin://icons/obj16/devices.png">
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="cppExample_bigtime_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clockExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="errorExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="eventExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="helloExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="logExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memoryExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="smallExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Stairstep Example" desc="The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="stairstepExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="staticExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_15.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swiExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="D:\ti\bios_6_34_02_18\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskMutexExample_DSKDA830_TMS320C67XX"/>
							<attribute key="device.variant" value="TMS320C67XX.DA830/DA828.DSKDA830"/>
						</attributes>
					</type>
				</content>
				</contents>
			</contents>
		</contents>
	</contents>

</resource.explorer>
